package io.mosip.authentication.partnerdemo.service;

import java.security.cert.X509Certificate;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import org.jose4j.jws.JsonWebSignature;
import org.jose4j.lang.JoseException;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.TestContext;
import org.springframework.test.context.junit4.SpringRunner;
import org.springframework.web.context.WebApplicationContext;

import io.mosip.kernel.crypto.jce.core.CryptoCore;


@RunWith(SpringRunner.class)
@WebMvcTest
@ContextConfiguration(classes = { TestContext.class, WebApplicationContext.class, CryptoCore.class })

public class SignatureTest {

	@Autowired
	CryptoCore cryptoCore;
	
	@Test
	public void testSign() throws JoseException {
		String signatureTxt = "eyJhbGciOiJSUzI1NiIsInR5cCI6Imp3dCIsIng1YyI6WyJNSUlFSnpDQ0F3K2dBd0lCQWdJR0FXNGJwTTArTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUhDTVNVd0l3WUpLb1pJaHZjTkFRa0JGaFp6ZFhKbGMyaGlZV0oxUUhONWJtTmllWFJsTG1sdU1SZ3dGZ1lEVlFRREV3OVRWVkpGVTBnZ1FrRkNWU0JOUTBzeEd6QVpCZ05WQkFzVEVsTnZablIzWVhKbElGTnZiSFYwYVc5dWN6RXRNQ3NHQTFVRUNoTWtVM2x1WTJKNWRHVWdTVzV1YjNaaGRHbHZibk1nVUhKcGRtRjBaU0JNYVcxcGRHVmtNUkl3RUFZRFZRUUhFd2xDUVU1SFFVeFBVa1V4RWpBUUJnTlZCQWdUQ1V0QlVrNUJWRUZMUVRFTE1Ba0dBMVVFQmhNQ1NVNHdIaGNOTVRreE1ETXdNRGMxTURFMVdoY05NVGt4TVRJNU1EYzFNREUxV2pDQnh6RXdNQzRHQTFVRUF3d25jbVJmWW1Nd1lqWTRORGd0Tm1RME5TMDBObVF4TFdFNVltUXRZak16TkRReE1HSm1PREl6TVFzd0NRWURWUVFHRXdKSlRqRVNNQkFHQTFVRUNCTUpTMkZ5Ym1GMFlXdGhNUkl3RUFZRFZRUUhFd2xDWVc1bllXeHZjbVV4SVRBZkJna3Foa2lHOXcwQkNRRVdFbUZrYldsdVFITjVibU5pZVhSbExtTnZiVEVNTUFvR0ExVUVDeE1EWkdWMk1TMHdLd1lEVlFRS0V5UlRXVTVEUWxsVVJTQkpUazVQVmtGVVNVOU9VeUJRVWtsV1FWUkZJRXhKVFVsVVJVUXdnZ0VoTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRGdBd2dnRUpBb0lCQUxIWEl5MzVVMnJnRGpOZStvZHEza2dYNC9CT0UxMkVFQkIrb3pMYUVnWnVRbjBGOVNDVWxGckZtZlFPbzVuZlBHbi9FQnlpdEg4cXVLM1F5SUw0OVRYWnZmUlFpcG4rcW0xSUMvNzJUQ1k4WmZPR2dkeUduVExSUEhkc25JcnJ5dlB2NlBJOTl6UzU5WjlndG9kSmFNV04waHBwamZYek1xd0pSbkpabEpZbVExRzMxRlhzbVBNYVkrSFhNSURoY0MyUFBjVEhESGtsRTdUZkNlQzk5dVMwNit4OUt3VDRGTkJqdGErQURsRlZoc2ZlYnNsQmVDbjRVSjl3aGNmcTF5dGdRSlYyZlZnRXBndXp0aVk3M2ZHWnFxZDA0UEViNmorVGlTeE0zeUE3aVhOeS9FTDRFVVROajVrc2R3Q0FqUlRGalhINS94TXpvalF2bVR3eHl5a0NBd0VBQWFNZE1Cc3dEQVlEVlIwVEJBVXdBd0VCL3pBTEJnTlZIUThFQkFNQ0FZWXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSGJDSEVmaHJkS3pKajU1L2p3WGVqTzFsclVVZjcycWRtVE03MTRSbFNETnBaK1JlQUZ1Z1UwejlwMHY0ZU93eFpHZWNwN0Eyc3k2UGZUMmF0TzY3eEp4UHMrQkVBZTY2cnNNK09pZmFxM0Fhd3EvcklTNTRmYkQ3VE9yOE10NmlncHJJRUdZY2x2WDIrbVJjNmpBMGVjaDEva3lBMEZHSnRxalNhSTdpQjVVWHFqWE5zU3NxaS92OUhpNkhnaHdTRTlod3FUQ2hrZkF4VDdjVHJwNUVZaDQ5YytCVHdIU2c1bjNrN2FqaENaRUY5OVZwd2ZOSUtaV0RLS0NNdmpDRzFQM2pWeVBoVG4xSjN1VVhteGRWZmNwdkpaSlZoaEVmTFJEUnd4MkxiVTRCcnUyekpzUzRKUXovdXNTNkxBZGxQQ1FPVHhiWmZYWXBhZWRpNElvVnhVPSJdfQ.RTYwQ0Y0MzkxQUNCQzY2MDY2RDIxNEI2REQ1MUE0NDE3QUIzNzg2ODM4RkZBMDNDOTc5NkNFRTZBMDFDRUYxQg.SLGXASbv9e82KNH_dwkI243yoZVsjWiUjf4y8kzxgQtSszAyqvsurPmzGg63kO89JWtS5zKUDi0EbHzfpU0ddi8XgPAPt3ES61GKpJbzqrsi0wGXGvSTgebB7_MiaXfyA0X_lHBoH5Fx1zBl1xdUoqNRFkG3Ujcir0Fmgsx4y4ENdSeQsg_098e8gJnBYpx6pVeQSKhRyh1prRh210smZFH_Xgi28TD4TsRV4MYTN9iQ8GUGKcD9C2gD5LMa8nPcznS9TdtzdvZGgD1bZY6f4aLZiEXWBJFumU1fUOz5LXNdy7kbWfQbtYGukM9Fs4EHHKCnZiKCvdk37yiATT7oKw.eyJhbGciOiJSUzI1NiIsInR5cCI6Imp3dCIsIng1YyI6WyJNSUlFSnpDQ0F3K2dBd0lCQWdJR0FXNGJwTTArTUEwR0NTcUdTSWIzRFFFQkN3VUFNSUhDTVNVd0l3WUpLb1pJaHZjTkFRa0JGaFp6ZFhKbGMyaGlZV0oxUUhONWJtTmllWFJsTG1sdU1SZ3dGZ1lEVlFRREV3OVRWVkpGVTBnZ1FrRkNWU0JOUTBzeEd6QVpCZ05WQkFzVEVsTnZablIzWVhKbElGTnZiSFYwYVc5dWN6RXRNQ3NHQTFVRUNoTWtVM2x1WTJKNWRHVWdTVzV1YjNaaGRHbHZibk1nVUhKcGRtRjBaU0JNYVcxcGRHVmtNUkl3RUFZRFZRUUhFd2xDUVU1SFFVeFBVa1V4RWpBUUJnTlZCQWdUQ1V0QlVrNUJWRUZMUVRFTE1Ba0dBMVVFQmhNQ1NVNHdIaGNOTVRreE1ETXdNRGMxTURFMVdoY05NVGt4TVRJNU1EYzFNREUxV2pDQnh6RXdNQzRHQTFVRUF3d25jbVJmWW1Nd1lqWTRORGd0Tm1RME5TMDBObVF4TFdFNVltUXRZak16TkRReE1HSm1PREl6TVFzd0NRWURWUVFHRXdKSlRqRVNNQkFHQTFVRUNCTUpTMkZ5Ym1GMFlXdGhNUkl3RUFZRFZRUUhFd2xDWVc1bllXeHZjbVV4SVRBZkJna3Foa2lHOXcwQkNRRVdFbUZrYldsdVFITjVibU5pZVhSbExtTnZiVEVNTUFvR0ExVUVDeE1EWkdWMk1TMHdLd1lEVlFRS0V5UlRXVTVEUWxsVVJTQkpUazVQVmtGVVNVOU9VeUJRVWtsV1FWUkZJRXhKVFVsVVJVUXdnZ0VoTUEwR0NTcUdTSWIzRFFFQkFRVUFBNElCRGdBd2dnRUpBb0lCQUxIWEl5MzVVMnJnRGpOZStvZHEza2dYNC9CT0UxMkVFQkIrb3pMYUVnWnVRbjBGOVNDVWxGckZtZlFPbzVuZlBHbi9FQnlpdEg4cXVLM1F5SUw0OVRYWnZmUlFpcG4rcW0xSUMvNzJUQ1k4WmZPR2dkeUduVExSUEhkc25JcnJ5dlB2NlBJOTl6UzU5WjlndG9kSmFNV04waHBwamZYek1xd0pSbkpabEpZbVExRzMxRlhzbVBNYVkrSFhNSURoY0MyUFBjVEhESGtsRTdUZkNlQzk5dVMwNit4OUt3VDRGTkJqdGErQURsRlZoc2ZlYnNsQmVDbjRVSjl3aGNmcTF5dGdRSlYyZlZnRXBndXp0aVk3M2ZHWnFxZDA0UEViNmorVGlTeE0zeUE3aVhOeS9FTDRFVVROajVrc2R3Q0FqUlRGalhINS94TXpvalF2bVR3eHl5a0NBd0VBQWFNZE1Cc3dEQVlEVlIwVEJBVXdBd0VCL3pBTEJnTlZIUThFQkFNQ0FZWXdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSGJDSEVmaHJkS3pKajU1L2p3WGVqTzFsclVVZjcycWRtVE03MTRSbFNETnBaK1JlQUZ1Z1UwejlwMHY0ZU93eFpHZWNwN0Eyc3k2UGZUMmF0TzY3eEp4UHMrQkVBZTY2cnNNK09pZmFxM0Fhd3EvcklTNTRmYkQ3VE9yOE10NmlncHJJRUdZY2x2WDIrbVJjNmpBMGVjaDEva3lBMEZHSnRxalNhSTdpQjVVWHFqWE5zU3NxaS92OUhpNkhnaHdTRTlod3FUQ2hrZkF4VDdjVHJwNUVZaDQ5YytCVHdIU2c1bjNrN2FqaENaRUY5OVZwd2ZOSUtaV0RLS0NNdmpDRzFQM2pWeVBoVG4xSjN1VVhteGRWZmNwdkpaSlZoaEVmTFJEUnd4MkxiVTRCcnUyekpzUzRKUXovdXNTNkxBZGxQQ1FPVHhiWmZYWXBhZWRpNElvVnhVPSJdfQ.MEI4NDYyNDA5RkQxMTE3QjU2QTVBNEEyQkNFRDY1RkIxMUQxMUI5NjFBQ0I5MjE0NUVDN0I4RTkxNzM4OEQ4Qw.hEr3KRLV8BqS0-9gBtmZfz8sfEGJDZx5xx9Zd6nfvfh8-HB_5e_soROtGPoJVUVgszto53FJSdQ4rjUBtXY3wLeq6KptFe4gl3shCxvEAkwRtlDLav4Qfaaat16_Y2N738PAI1vZ1bXpXN1VUyohxmbFLoMc3BYND62qAyibzH1A3bswqyS4IhEN7ksCT-rMmJ9izkxKgjF4o3kZYWj1FvvseqKiOR54Q5WAWYRS_9pc0RqvTl0YV-Bu1kVsFORy-ELQ2-4p-qnm5KhLBve8vmVEx51JHTknIljEQzv7LuoJHxvy1he3hEKQIDZizqdzoo74NGznATgIWzqNBdmo1g";
		String[] payloadSignTxt = Arrays.stream(signatureTxt.split("\\.")).skip(3).toArray(s -> new String[s]);
		String bioSign = Arrays.stream(payloadSignTxt).collect(Collectors.joining("."));
		JsonWebSignature jws = new JsonWebSignature();
		jws.setCompactSerialization(bioSign);
		List<X509Certificate> certificateChainHeaderValue = jws.getCertificateChainHeaderValue();
		System.out.println(certificateChainHeaderValue.get(0));
		X509Certificate certificate = certificateChainHeaderValue.get(0);
		//cryptoCore.sign(arg0, arg1)
	}
	
}
